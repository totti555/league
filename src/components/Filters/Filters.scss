// .hide-checkbox {
//     display: none;
// }

label {
    cursor: pointer;
    border: none;
}

// input[type=checkbox]:checked+.entity {
//     animation-name: select-checkbox;
//     animation-duration: 0.5s;
//     animation-fill-mode: forwards;
// }





/*
=====
CORE STYLES
=====
*/



.toggle {
    --uiToggleSize: var(--toggleSize, 1.25rem);
    --uiToggleBorderWidth: var(--toggleBorderWidth, 2px);
    --uiToggleColor: var(--toggleColor, #222);

    display: var(--toggleDisplay, inline-flex);
    position: relative;
}

.toggle__input {
    width: var(--uiToggleSize);
    height: var(--uiToggleSize);
    opacity: 0;

    position: absolute;
    top: 0;
    left: 0;
    margin: 0;
}

.toggle__label {
    display: inline-flex;
    min-height: var(--uiToggleSize);
    padding-left: calc(var(--uiToggleSize) + var(--toggleIndent, .4em));
}

.toggle__label:hover {
    animation-name: hoverCheckboxes;
    animation-duration: 0.5s;
    animation-fill-mode: forwards;
}

@keyframes hoverCheckboxes {
    0% {
        color: var(--toggleColor, #222);
    }

    100% {
        color: #ECB823
    }
}




.toggle__input:not(:disabled)~.toggle__label {
    cursor: pointer;
}

/*
  1. Ems helps to calculate size of the checkbox
  */

.toggle__label::after {
    content: "";
    box-sizing: border-box;
    width: 1em;
    height: 1em;
    font-size: var(--uiToggleSize);
    /* 1 */

    background-color: transparent;
    border: var(--uiToggleBorderWidth) solid var(--uiToggleColor);

    position: absolute;
    left: 0;
    top: 0;
    z-index: 2;

    &:hover {
        border: 1px solid #ECB823
    }
}



.toggle__input:checked~.toggle__label::after {
    background-color: var(--uiToggleColor);
}

.toggle__text {
    margin-top: auto;
    margin-bottom: auto;
}

/*
  The arrow size and position depends from sizes of square because I needed an arrow correct positioning from the top left corner of the element toggle
  
  1. Ems helps to calculate size and position of the arrow
  */

.toggle__label::before {
    content: "";
    width: 0;
    height: 0;
    font-size: var(--uiToggleSize);
    /* 1 */

    border-left-width: 0;
    border-bottom-width: 0;
    border-left-style: solid;
    border-bottom-style: solid;
    border-color: var(--toggleArrowColor, #fff);

    position: absolute;
    top: .5428em;
    left: .25em;
    z-index: 3;

    transform-origin: left top;
    transform: rotate(-40deg) skew(10deg);
}

.toggle__input:checked~.toggle__label::before {
    --uiToggleArrowWidth: var(--toggleArrowWidth, 2px);

    width: .4em;
    height: .2em;
    border-left-width: var(--uiToggleArrowWidth);
    border-bottom-width: var(--uiToggleArrowWidth);
}

/*
  States
  */

/* focus state */

// .toggle:focus-within {
//     outline: var(--toggleOutlineWidthFocus, 3px) solid var(--toggleOutlineColorFocus, currentColor);
//     outline-offset: var(--toggleOutlineOffsetFocus, 5px);
// }

/* disabled state */

.toggle__input:disabled~.toggle__label {
    opacity: var(--toggleOpacityDisabled, .24);
    cursor: var(--toggleCursorDisabled, not-allowed);
    user-select: none;
}

/*
  =====
  PRESENTATION STYLES
  =====
  */

/* 
  The demo skin
  */



/* 
  The animation of switching states
  */

.toggle__input:not(:disabled)~.toggle__label::before {
    will-change: width, height;
    opacity: 0;
}

.toggle__input:not(:disabled):checked~.toggle__label::before {
    opacity: 1;
    transition: opacity .1s ease-out .15s, width .1s ease-out .3s, height .1s ease-out .2s;
}

.toggle__input:not(:disabled)~.toggle__label::after {
    will-change: background-color;
    transition: background-color .15s ease-out;
}



// Button 

.btn-filter {
    // position: relative;
    background-color: black;
    border: solid 1px #ECB823;
    color: white;
    font-size: 12px;
    margin-right: 10px;
    border-radius: 4px;
    padding: 5px;
    // float: right;
    // bottom: -5px;

}

.cross {
    color: transparent;
    text-shadow: 0 0 0 #ECB823;
}

.wrap {
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
}

.button-filter {
    width: 180px;
    height: 45px;
    font-family: 'Roboto', sans-serif;
    font-size: 11px;
    text-transform: uppercase;
    letter-spacing: 2.5px;
    font-weight: 500;
    color: white;
    background-color: black;
    border: 1px solid white;
    border-radius: 8px;
    box-shadow: 0px 8px 15px rgba(0, 0, 0, 0);
    transition: all 0.3s ease 0s;
    cursor: pointer;
    outline: none;
}

$transition-time: 750ms;

.button-filter:hover {
    background-color: #ECB823;
    box-shadow: 0px 15px 20px rgba(218, 172, 23, 0.4);
    color: #fff;
    transform: translateY(-7px);
}

.delete-button {
    margin-top: 10px;
    margin-bottom: 10px;
}